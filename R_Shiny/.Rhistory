knitr::opts_chunk$set(echo = TRUE)
library(shiny)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(waveformtools)
library(tidyverse)
library(mgcv)
library(hms)
library(shiny)
library(shinythemes)
library(shinyTime)
cvp <- sample_record2$vital$Intellivue$CVP %>%
filter(between(as_hms(time), as_hms("18:42:00"), as_hms("18:43:00"))) %>%
mutate(time_s = seconds_since_start(time))
cvp_indexed <- cvp %>%
gen_annotation_index(sample_record2$qrs$time, prefix = 'qrs') %>%
gen_annotation_index(sample_record2$vscapture$insp_start$time, prefix = 'insp')
ui <- fluidPage(theme = shinytheme("cerulean"),
navbarPage("Shiny stuff",
# Page header
tabPanel("Justering af parametre",
# Input values
sidebarPanel(
h3("Inputs"),
sliderInput("qrs_rel_index", label = "qrs_rel_index - k",
min = 0, max = 100,
value = 50),
sliderInput("insp_rel_index", label = "insp_rel_index - k",
min = 0, max = 100,
value = 30),
selectInput("method", label = "Method:",
choices = list("REML" = "REML", "P-REML" = "P-REML", "ML" = "ML",
"P-ML" = "P-ML",  "fREML"="fREML"),
selected = "REML"),
sliderInput("interaction_index1", label = "interaction_index1 - k",
min = 0, max = 100,
value = 20),
sliderInput("interaction_index2", label = "interaction_index2 - k",
min = 0, max = 100,
value = 10),
# Set to custom time
timeInput("time_start", "Start", value = strptime("18:42:00", "%T")),
timeInput("time_slut", "Slut", value = strptime("18:43:00", "%T")),
),
# Main panel for displaying outputs ----
mainPanel(
# Output: plots ----
plotOutput(outputId = "samlet_plots")
)
),#tabpanel 1 slut
tabPanel("Blomster og Bins bby",
sidebarPanel(
h3("Blomster"),
sliderInput("Bins_antal", label = "Bins baby",
min = 1, max = 100,
value = 50),
),
mainPanel(
# Output: plots ----
plotOutput(outputId = "bin_plot")
)
),
tabPanel("Info", "Lavet af en sej studiegruppe")
)#navbarpage
)
server <- function(input, output) {
output$samlet_plots <- renderPlot({
cvp_gam <- bam(
CVP ~ s(qrs_rel_index, bs = 'cc', k = input$qrs_rel_index) +
s(insp_rel_index, bs = 'cc', k = input$insp_rel_index) +
ti(
qrs_rel_index,
insp_rel_index,
bs = c('cc', 'cc'),
k = c(input$interaction_index1, input$interaction_index2)
) +
s(time_s),
method = input$method,
#rho = 0.95,
data = cvp_indexed,
nthreads = 16 # Number of (virtual) cores
)
gratia::draw(cvp_gam)
})# slutter renderPlot her
output$bin_plot <- renderPlot({
x <- iris$Sepal.Length
x <- na.omit(x)
bins = seq(min(x),max(x), length.out = input$Bins_antal +1)
hist(x,breaks = bins)
})
}
shinyApp(ui = ui, server = server)
