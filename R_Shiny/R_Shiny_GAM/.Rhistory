shiny::runApp()
dygraph_signal(sample_record2$vital$Intellivue$CVP) %>% dygraph_events(sample_record2$vent_event_labels)
predict(cvp_gam, terms = "s(insp_rel_index)") %>% plot
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(waveformtools)
library(tidyverse)
#library(mgcv)
#library(hms)
library(shiny)
library(shinythemes)
#library(shinyTime)
#library(data.table)
library(dygraphs)
seq(0,9)
paste0("0", firstnr)
firstnr <- seq(1,9)
paste0("0", firstnr)
second <- seq(10,61)
combined_two firstnr + second
firstnr <- seq(1,9)
paste0("0", firstnr)
second <- seq(10,61)
combined_two firstnr + second
combined_two <- firstnr + second
combined_two <- concat(firstnr, second)
combined_two <- concat(firstnr, second)
combined_two <- paste(firstnr, second)
combined_two <-
c(firstnr, combined_two)
firstnr <- seq(1,9)
new <- paste0("0", firstnr)
second <- seq(10,61)
combined_two <- c(new, combined_two)
firstnr <- seq(1,9)
new <- paste0("0", firstnr)
second <- seq(10,61)
combined_two <- c(new, second)
combined_finished <- paste0("pt", combined_two)
paste("../Datasets/thoracotomy_waveforms/","pt01", ".RDS")
paste("../Datasets/thoracotomy_waveforms/","pt01", ".RDS", sep="")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(waveformtools)
library(tidyverse)
#library(mgcv)
#library(hms)
library(shiny)
library(shinythemes)
#library(shinyTime)
#library(data.table)
library(dygraphs)
ui = fluidPage(
mainPanel(
dygraphOutput("dygraph"),
br(),
tableOutput("table21"),
plotOutput("ggplottet", click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)),
selectInput("method", label = "Method:",
choices = list(combined_finished = combined_finished),  selected = "pt01"),
tableOutput("table222") # det er meningen at denne ikke shower noget
)
)
server = function(input, output) {
cvp <- sample_record2$vital$Intellivue$CVP %>%
mutate(time_s = seconds_since_start(time)) %>%  # time_s er x værdier
mutate(working_time = paste(substring(time, 12, 12), "6", substring(time, 14, 19), sep="")) # denne linje er til for: da vores data er blevet skubbet pga. gdpr, så skal to plots lige matche, da output-range for dygraph_signal er de originale tider (åbenbart?)
output$dygraph <- renderDygraph({
sample_record2$vital$Intellivue$CVP %>%
dygraph_signal()
}) # plotter dygraph_signal
cvp_reactive <- reactive({
cvp[opdatere_start():opdatere_slut(),]
}) # laver den reactiv, så ggplottet kan blive opdateret
output$ggplottet <- renderPlot({
ggplot(cvp_reactive()) +
geom_line(aes(time_s, CVP))
}) #plotter ggplot med reactiv data
opdatere_start <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[1]], 12, 19))[1]
}) # tager range ud fra dygraph vha. input$dygraph_date_window, hvorefter den leder i working_time efter, hvad der er ens og vælger så den første
opdatere_slut <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[2]], 12, 19))[1]
})  # samme som ovenover
point_clicked_row <- reactive({
nearPoints(cvp_reactive(), input$plot1_click, maxpoints = 1, threshold = 10)
}) # reaktiv point
output$table21 <- renderTable({
point_clicked_row()
}) # laver table til at show
output$table222 <- renderTable({
write.table(point_clicked_row(),
file = "Intervaller.csv", sep = ",", append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE) #denne er lidt kontroversiel pga. renderTable, men det virker :)
})
firstnr <- seq(1,9)
new <- paste0("0", firstnr)
second <- seq(10,61)
combined_two <- c(new, second)
combined_finished <- paste0("pt", combined_two)
}
shinyApp(ui = ui, server = server)
str_pad(seq(1,61), 2, pad = "0")
str_pad(seq(1,161), 2, pad = "0")
ui = fluidPage(
mainPanel(
dygraphOutput("dygraph"),
br(),
tableOutput("table21"),
plotOutput("ggplottet", click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)),
selectInput("method", label = "Method:",
choices = list(combined_finished = combined_finished),  selected = "pt01"),
tableOutput("table222") # det er meningen at denne ikke shower noget
)
)
server = function(input, output) {
cvp <- sample_record2$vital$Intellivue$CVP %>%
mutate(time_s = seconds_since_start(time)) %>%  # time_s er x værdier
mutate(working_time = paste(substring(time, 12, 12), "6", substring(time, 14, 19), sep="")) # denne linje er til for: da vores data er blevet skubbet pga. gdpr, så skal to plots lige matche, da output-range for dygraph_signal er de originale tider (åbenbart?)
output$dygraph <- renderDygraph({
sample_record2$vital$Intellivue$CVP %>%
dygraph_signal()
}) # plotter dygraph_signal
cvp_reactive <- reactive({
cvp[opdatere_start():opdatere_slut(),]
}) # laver den reactiv, så ggplottet kan blive opdateret
output$ggplottet <- renderPlot({
ggplot(cvp_reactive()) +
geom_line(aes(time_s, CVP))
}) #plotter ggplot med reactiv data
opdatere_start <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[1]], 12, 19))[1]
}) # tager range ud fra dygraph vha. input$dygraph_date_window, hvorefter den leder i working_time efter, hvad der er ens og vælger så den første
opdatere_slut <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[2]], 12, 19))[1]
})  # samme som ovenover
point_clicked_row <- reactive({
nearPoints(cvp_reactive(), input$plot1_click, maxpoints = 1, threshold = 10)
}) # reaktiv point
output$table21 <- renderTable({
point_clicked_row()
}) # laver table til at show
output$table222 <- renderTable({
write.table(point_clicked_row(),
file = "Intervaller.csv", sep = ",", append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE) #denne er lidt kontroversiel pga. renderTable, men det virker :)
})
firstnr <- seq(1,9)
new <- paste0("0", firstnr)
second <- seq(10,61)
combined_two <- c(new, second)
combined_finished <- paste0("pt", combined_two)
}
shinyApp(ui = ui, server = server)
ui = fluidPage(
mainPanel(
dygraphOutput("dygraph"),
br(),
tableOutput("table21"),
plotOutput("ggplottet", click = "plot1_click",
brush = brushOpts(
id = "plot1_brush"
)),
selectInput("method", label = "Method:",
choices = list(combined_finished = combined_finished),  selected = "pt01"),
tableOutput("table222") # det er meningen at denne ikke shower noget
)
)
server = function(input, output) {
cvp <- sample_record2$vital$Intellivue$CVP %>%
mutate(time_s = seconds_since_start(time)) %>%  # time_s er x værdier
mutate(working_time = paste(substring(time, 12, 12), "6", substring(time, 14, 19), sep="")) # denne linje er til for: da vores data er blevet skubbet pga. gdpr, så skal to plots lige matche, da output-range for dygraph_signal er de originale tider (åbenbart?)
output$dygraph <- renderDygraph({
sample_record2$vital$Intellivue$CVP %>%
dygraph_signal()
}) # plotter dygraph_signal
cvp_reactive <- reactive({
cvp[opdatere_start():opdatere_slut(),]
}) # laver den reactiv, så ggplottet kan blive opdateret
output$ggplottet <- renderPlot({
ggplot(cvp_reactive()) +
geom_line(aes(time_s, CVP))
}) #plotter ggplot med reactiv data
opdatere_start <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[1]], 12, 19))[1]
}) # tager range ud fra dygraph vha. input$dygraph_date_window, hvorefter den leder i working_time efter, hvad der er ens og vælger så den første
opdatere_slut <- reactive({ if (!is.null(input$dygraph_date_window))
which(cvp$working_time %in% substring(input$dygraph_date_window[[2]], 12, 19))[1]
})  # samme som ovenover
point_clicked_row <- reactive({
nearPoints(cvp_reactive(), input$plot1_click, maxpoints = 1, threshold = 10)
}) # reaktiv point
output$table21 <- renderTable({
point_clicked_row()
}) # laver table til at show
output$table222 <- renderTable({
write.table(point_clicked_row(),
file = "Intervaller.csv", sep = ",", append = TRUE, quote = FALSE,
col.names = FALSE, row.names = FALSE) #denne er lidt kontroversiel pga. renderTable, men det virker :)
})
firstnr <- seq(1,9)
new <- paste0("0", firstnr)
second <- seq(10,61)
combined_two <- c(new, second)
combined_finished <- paste0("pt", combined_two)
}
shinyApp(ui = ui, server = server)
filepath <- "../Datasets/thoracotomy_waveforms_prelim/pt03.RDS"
full_dataload <- readRDS(filepath, refhook = NULL)
library(waveformtools)
library(tidyverse)
library(mgcv)
library(hms)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
something <- dyCallbacks(dygraph_signal(sample_record2$vital$Intellivue$CVP))
sample_record2$vital$Intellivue$CVP %>%
dygraph_signal()
cvp <- sample_record2$vital$Intellivue$CVP %>%
filter(between(as_hms(time), as_hms("18:42:00"), as_hms("18:43:00"))) %>%
mutate(time_s = seconds_since_start(time))
library(shinyWidgets)
?bam
